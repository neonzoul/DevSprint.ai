{
  "name": "s-1-4--devsprint-ai",
  "version": "1.0.0",
  "description": "| วัน           | งานที่ต้องทำ                                                                                                                                                                                                                                                         | เกณฑ์ความสำเร็จ (บรรลุ)                                                                                   |\r | ------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- |\r | **Day 1 []**  | **Scaffold & Env Setup**• สร้างโฟลเดอร์โปรเจกต์ (`devsprint`) พร้อม `package.json`• ติดตั้ง deps: `express`, `body-parser`, `express-session`, `passport-google-oauth20`, `dotenv`• สร้าง `.env` เก็บ `GOOGLE_CLIENT_ID` / `GOOGLE_CLIENT_SECRET` / `SESSION_SECRET` | • รัน `npm start` แล้วไม่มี error• `.env` ถูกโหลด (ทดสอบอ่าน `process.env.SESSION_SECRET`)                |\r | **Day 2 []**  | **Google OAuth Routes**• ตั้งค่า Passport Google Strategy ใน `server/server.js`• สร้าง route `/auth/google` และ `/auth/google/callback`• เก็บ profile ลง `req.session.user`                                                                                          | • เข้าถึง `/auth/google` → ไป Google consent• หลัง callback → `req.session.user` มี `{ id, name, email }` |\r | **Day 3 []**  | **Login UI & Session**• สร้าง `public/index.html` ใส่ปุ่ม “Sign in with Google”• Serve โฟลเดอร์ `public/` ด้วย Express• สร้าง route `/logout` เพื่อล้าง session                                                                                                      | • คลิกปุ่ม Login → เข้าสู่ Google → กลับมาแล้วหน้าโหลดเสร็จ• `/logout` ล้าง session ได้จริง               |\r | **Day 4 []**  | **Basic Chat UI**• เพิ่ม `<div id=\"chat\">`, `<ul id=\"messages\">`, `<input>`, `<button>` ใน `index.html`• เขียน `src/client.js` ให้ส่ง POST `/api/chat`• สร้าง stub endpoint `/api/chat` ตอบกลับ mock                                                                 | • UI แสดงข้อความ user และ mock reply สลับกันได้• ไม่มี error ใน console                                   |\r | **Day 5 []**  | **OpenAI Integration**• ติดตั้ง `openai` SDK• สร้างไฟล์ `server/agent.js` ฟังก์ชัน `splitProject(description)`• ใน `/api/chat` ถ้า message เริ่มด้วย `split:` ให้เรียก `splitProject` แล้วคืนผล                                                                      | • พิมพ์ `split: สร้าง TODO app` → ได้ list 3–5 tasks กลับมาใน chat                                        |\r | **Day 6 []**  | **State Management**• สร้าง `server/state.js` เก็บ in-memory `sessions` object• เขียน `storage.js` abstraction: `getUserData`/`saveUserData`• ใน `agent.handleMessage` เพิ่มคำสั่ง `today` & `done X` อัปเดต state                                                   | • `today` คืนเฉพาะงานที่ due=วันนี้• `done 2` อัปเดตสถานะ task #2 แล้ว `today` เปลี่ยนตาม                 |\r | **Day 7 []**  | **Webhook Endpoint**• สร้าง route `/api/webhook` ใน `server/server.js`• เขียน handler รับ `{ taskId, title, dueDate }` → forward ไป `N8N_WEBHOOK_URL`                                                                                                                | • POST ไป `/api/webhook` → Response 200• n8n ได้รับ payload เมื่อทดสอบด้วย Postman                        |\r | **Day 8 []**  | **n8n Workflow & Calendar**• ตั้ง n8n Webhook Node (path `/devsprint-calendar`)• ตั้ง Google Calendar Node สร้าง Event จาก payload• ทดสอบ flow: ส่ง payload → เห็น Event ในปฏิทิน                                                                                    | • เมื่อ trigger จาก Postman → Google Calendar มี Event “DevSprint: …”                                     |\r | **Day 9 []**  | **Connect Chat → Calendar**• ใน `logProgress(taskId)` หลังอัปเดต state ให้เรียก `/api/webhook`• ทดสอบพิมพ์ `done X` ใน chat → ดูว่า Event ถูกสร้างจริง                                                                                                               | • พิมพ์ `done 1` → Chat ตอบ “Task #1 เสร็จแล้ว” + Event ขึ้นปฏิทิน                                        |\r | **Day 10 []** | **UI Polish & Deploy**• เพิ่ม loading state, error toast• ปรับ CSS ให้ดูเรียบร้อย (mobile responsive)• เตรียม deploy (Heroku/Railway)• ทดสอบ end-to-end (login, split, today, done, calendar)                                                                        | • ไม่มี error uncaught• Responsive บนมือถือ• โค้ด deploy ขึ้น server จริงและใช้งานได้ครบทุก flow          |",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/neonzoul/DevSprint.ai.git"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "bugs": {
    "url": "https://github.com/neonzoul/DevSprint.ai/issues"
  },
  "homepage": "https://github.com/neonzoul/DevSprint.ai#readme"
}
